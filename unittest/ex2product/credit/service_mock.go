// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package credit is a generated GoMock package.
package credit

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddByUserID mocks base method.
func (m *MockService) AddByUserID(userID string, interval float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddByUserID", userID, interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddByUserID indicates an expected call of AddByUserID.
func (mr *MockServiceMockRecorder) AddByUserID(userID, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddByUserID", reflect.TypeOf((*MockService)(nil).AddByUserID), userID, interval)
}

// GetByUserID mocks base method.
func (m *MockService) GetByUserID(userID string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockServiceMockRecorder) GetByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockService)(nil).GetByUserID), userID)
}
